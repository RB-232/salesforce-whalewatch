//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class EtherscanJSONHelper {

	public String status {get;set;} 
	public String message {get;set;} 
	public List<Result> result {get;set;} 

	public EtherscanJSONHelper(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'status') {
						status = parser.getText();
					} else if (text == 'message') {
						message = parser.getText();
					} else if (text == 'result') {
						result = arrayOfResult(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'EtherscanJSONHelper consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Result {
		public String blockNumber {get;set;} 
		public String timeStamp {get;set;} 
		public String hash {get;set;} 
		public String nonce {get;set;} 
		public String blockHash {get;set;} 
		public String transactionIndex {get;set;} 
		public String from_Z {get;set;} // in json: from
		public String to {get;set;} 
		public String value {get;set;} 
		public String gas {get;set;} 
		public String gasPrice {get;set;} 
		public String isError {get;set;} 
		public String txreceipt_status {get;set;} 
		public String input {get;set;} 
		public String contractAddress {get;set;} 
		public String cumulativeGasUsed {get;set;} 
		public String gasUsed {get;set;} 
		public String confirmations {get;set;} 

		public Result(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'blockNumber') {
							blockNumber = parser.getText();
						} else if (text == 'timeStamp') {
							timeStamp = parser.getText();
						} else if (text == 'hash') {
							hash = parser.getText();
						} else if (text == 'nonce') {
							nonce = parser.getText();
						} else if (text == 'blockHash') {
							blockHash = parser.getText();
						} else if (text == 'transactionIndex') {
							transactionIndex = parser.getText();
						} else if (text == 'from') {
							from_Z = parser.getText();
						} else if (text == 'to') {
							to = parser.getText();
						} else if (text == 'value') {
							value = parser.getText();
						} else if (text == 'gas') {
							gas = parser.getText();
						} else if (text == 'gasPrice') {
							gasPrice = parser.getText();
						} else if (text == 'isError') {
							isError = parser.getText();
						} else if (text == 'txreceipt_status') {
							txreceipt_status = parser.getText();
						} else if (text == 'input') {
							input = parser.getText();
						} else if (text == 'contractAddress') {
							contractAddress = parser.getText();
						} else if (text == 'cumulativeGasUsed') {
							cumulativeGasUsed = parser.getText();
						} else if (text == 'gasUsed') {
							gasUsed = parser.getText();
						} else if (text == 'confirmations') {
							confirmations = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Result consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static EtherscanJSONHelper parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new EtherscanJSONHelper(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	


    private static List<Result> arrayOfResult(System.JSONParser p) {
        List<Result> res = new List<Result>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Result(p));
        }
        return res;
    }



}